// DO NOT EDIT THIS FILE: Auto-generated code by https://github.com/foomo/contentful-erm
{{ $cfg := . }}{{ $locales := .Locales }}{{ $contentTypes := .ContentTypes }}
package {{ .PackageName }}

import (
	"bytes"
	"encoding/json"
	"errors"

	"github.com/foomo/contentful"
)

{{ range $index , $locale := $locales }}const spaceLocale{{ $locale.Name }} string = "{{ $locale.Code }}"
{{ end }}
{{ range $index , $locale := $locales }}{{ if $locale.Default }}const defaultLocale string = spaceLocale{{ $locale.Name }}{{ end }}
{{ end }}var spaceLocales []string = []string{ {{ range $index , $locale := $locales }}spaceLocale{{ $locale.Name }}, {{ end }} }

type contentfulClient struct {
	SpaceID string
	CDAKey  string
	CPAKey  string
	CMAKey  string
	CDA     *contentful.Contentful
	CPA     *contentful.Contentful
	CMA     *contentful.Contentful
	Debug   bool
}

func getContentfulClient(cc *contentfulClient) (ccOut *contentfulClient, err error) {
	if cc.SpaceID == "" {
		return nil, errors.New("GetContentfulClient: SpaceID cannot be empty")
	}
	if cc.CDAKey == "" && cc.CPAKey == "" && cc.CMAKey == "" {
		return nil, errors.New("GetContentfulClient: You must provide at least one API Key")
	}
	if cc.CDAKey != "" {
		cc.CDA = contentful.NewCDA(cc.CDAKey)
		cc.CDA.Debug = cc.Debug == true
	}
	if cc.CPAKey != "" {
		cc.CPA = contentful.NewCPA(cc.CDAKey)
		cc.CPA.Debug = cc.Debug == true
	}
	if cc.CMAKey != "" {
		cc.CMA = contentful.NewCMA(cc.CDAKey)
		cc.CPA.Debug = cc.Debug == true
	}
	return cc, nil
}
{{ range $index , $contentType := $contentTypes }}
// ---{{ firstCap $contentType.Sys.ID }} methods---

func newCf{{ firstCap $contentType.Sys.ID }}() (cf{{ firstCap $contentType.Sys.ID }} *Cf{{ firstCap $contentType.Sys.ID }}) {
	cf{{ firstCap $contentType.Sys.ID }} = &Cf{{ firstCap $contentType.Sys.ID }}{}
	{{ range $fieldIndex, $field := $contentType.Fields }}cf{{ firstCap $contentType.Sys.ID }}.Fields.{{ firstCap $field.ID }} = make(map[string]{{ mapFieldType $contentType.Sys.ID $field }})
	{{ end }}return
}

func (cc *contentfulClient) getAll{{ firstCap $contentType.Sys.ID }}() (vos []*Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	return cc.getFiltered{{ firstCap $contentType.Sys.ID }}(nil)
}

func (cc *contentfulClient) getFiltered{{ firstCap $contentType.Sys.ID }}(query *contentful.Query) (vos []*Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	if cc.CDA == nil {
		return nil, errors.New("getFiltered{{ firstCap $contentType.Sys.ID }}: No CDA client available")
	}
	col := cc.CDA.Entries.List(cc.SpaceID)
	if query != nil {
		col.Query = *query
	}
	col.Query.ContentType("{{ $contentType.Sys.ID }}").Locale("*").Include(10)
	col.GetAll()
	return toCf{{ firstCap $contentType.Sys.ID }}(col)
}

func toCf{{ firstCap $contentType.Sys.ID }}(col *contentful.Collection) (vos []*Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	for _, item := range col.Items {
		var vo Cf{{ firstCap $contentType.Sys.ID }}
		byteArray, _ := json.Marshal(item)
		err = json.NewDecoder(bytes.NewReader(byteArray)).Decode(&vo)
		if err != nil {
			break
		}
		vo.Col = col
		vos = append(vos, &vo)
	}
	return vos, err
}

// Field getters
{{ range $fieldIndex, $field := $contentType.Fields }}
{{ if fieldIsText $field }}func (vo *Cf{{ firstCap $contentType.Sys.ID }}) get{{ firstCap $field.ID }}(locale ...string) ({{ $field.ID }} {{ mapFieldType $contentType.Sys.ID $field }}, err error) {
	var loc string
	if len(locale) != 0 {
		loc = locale[0]
	} else {
		loc = defaultLocale
	}
	if val, ok := vo.Fields.{{ firstCap $field.ID }}[loc]; ok {
		{{ $field.ID }} = val
		return
	}
	err = errors.New("Cf{{ firstCap $contentType.Sys.ID }}.get{{ firstCap $field.ID }}: value for locale not found")
	return
}{{ end }}{{ end }}{{ end }}