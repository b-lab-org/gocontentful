// Package {{ .PackageName }} - DO NOT EDIT THIS FILE: Auto-generated code by https://github.com/foomo/contentful-erm
{{ $cfg := . }}{{ $contentType := .ContentType }}package {{ .PackageName }}

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/foomo/contentful"
)

const ContentType{{ firstCap $contentType.Sys.ID }} = "{{ $contentType.Sys.ID }}" 

// ---{{ firstCap $contentType.Sys.ID }} methods---

func NewCf{{ firstCap $contentType.Sys.ID }}() (cf{{ firstCap $contentType.Sys.ID }} *Cf{{ firstCap $contentType.Sys.ID }}) {
	cf{{ firstCap $contentType.Sys.ID }} = &Cf{{ firstCap $contentType.Sys.ID }}{}
	{{ range $fieldIndex, $field := $contentType.Fields }}cf{{ firstCap $contentType.Sys.ID }}.Fields.{{ firstCap $field.ID }} = map[string]{{ mapFieldType $contentType.Sys.ID $field }}{}
	{{ end }}
	cf{{ firstCap $contentType.Sys.ID }}.Sys.ContentType.Sys.ID = "{{ $contentType.Sys.ID }}"
	cf{{ firstCap $contentType.Sys.ID }}.Sys.ContentType.Sys.Type = FieldTypeLink
	cf{{ firstCap $contentType.Sys.ID }}.Sys.ContentType.Sys.LinkType = "ContentType"
	return
}

func (cc *ContentfulClient) GetAll{{ firstCap $contentType.Sys.ID }}() (vos []*Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	return cc.GetFiltered{{ firstCap $contentType.Sys.ID }}(nil)
}

func (cc *ContentfulClient) GetFiltered{{ firstCap $contentType.Sys.ID }}(query *contentful.Query) (vos []*Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	if cc.CDA == nil {
		return nil, errors.New("getFiltered{{ firstCap $contentType.Sys.ID }}: No CDA client available")
	}
	col := cc.CDA.Entries.List(cc.SpaceID)
	if query != nil {
		col.Query = *query
	} else {
		col.Query.Include(10)
	}
	col.Query.ContentType("{{ $contentType.Sys.ID }}").Locale("*")
	_, err = col.GetAll()
	if err != nil {
		return nil, err
	}
	if col.Includes["Entry"] != nil {
		for _, item := range col.Items { 
			col.Includes["Entry"] = append(col.Includes["Entry"].([]interface{}), item)
		}
	}
	return ColToCf{{ firstCap $contentType.Sys.ID }}(col,cc.LogFn)
}

func (cc *ContentfulClient) Get{{ firstCap $contentType.Sys.ID }}ByID(id string) (vo *Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	if cc.CDA == nil {
		return nil, errors.New("Get{{ firstCap $contentType.Sys.ID }}ByID: No CDA client available")
	}
	col := cc.CDA.Entries.List(cc.SpaceID)
	col.Query.ContentType("{{ $contentType.Sys.ID }}").Locale("*").Equal("sys.id",id)
	_, err = col.GetAll()
	if err != nil {
		return nil, err
	}
		if len(col.Items) == 0 {
		return nil, fmt.Errorf("Get{{ firstCap $contentType.Sys.ID }}ByID: %s Not found", id)
	}
	vos, err := ColToCf{{ firstCap $contentType.Sys.ID }}(col,cc.LogFn)
	if err != nil {
		return nil, fmt.Errorf("Get{{ firstCap $contentType.Sys.ID }}ByID: Error converting %s to VO: " + err.Error(), id)
	}
	vo = vos[0]
	return
}

func (cc *ContentfulClient) PreviewAll{{ firstCap $contentType.Sys.ID }}() (vos []*Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	return cc.PreviewFiltered{{ firstCap $contentType.Sys.ID }}(nil)
}

func (cc *ContentfulClient) PreviewFiltered{{ firstCap $contentType.Sys.ID }}(query *contentful.Query) (vos []*Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	if cc.CPA == nil {
		return nil, errors.New("PreviewFiltered{{ firstCap $contentType.Sys.ID }}: No CPA client available")
	}
	col := cc.CPA.Entries.List(cc.SpaceID)
	if query != nil {
		col.Query = *query
	}
	col.Query.ContentType("{{ $contentType.Sys.ID }}").Locale("*").Include(10)
	_, err = col.GetAll()
	if err != nil {
		return nil, err
	}
	if col.Includes["Entry"] != nil {
		for _, item := range col.Items { 
			col.Includes["Entry"] = append(col.Includes["Entry"].([]interface{}), item)
		}
	}
	return ColToCf{{ firstCap $contentType.Sys.ID }}(col,cc.LogFn)
}

func (cc *ContentfulClient) Preview{{ firstCap $contentType.Sys.ID }}ByID(id string) (vo *Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	if cc.CPA == nil {
		return nil, errors.New("Preview{{ firstCap $contentType.Sys.ID }}ByID: No CPA client available")
	}
	col := cc.CPA.Entries.List(cc.SpaceID)
	col.Query.ContentType("{{ $contentType.Sys.ID }}").Locale("*").Equal("sys.id",id)
	_, err = col.GetAll()
	if err != nil {
		return nil, err
	}
	if len(col.Items) == 0 {
		return nil, fmt.Errorf("Preview{{ firstCap $contentType.Sys.ID }}ByID: %s Not found", id)
	}
	vos, err := ColToCf{{ firstCap $contentType.Sys.ID }}(col,cc.LogFn)
	if err != nil {
		return nil, fmt.Errorf("Preview{{ firstCap $contentType.Sys.ID }}ByID: Error converting %s to VO: " + err.Error(), id)
	}
	vo = vos[0]
	return
}

func (cc *ContentfulClient) ManageAll{{ firstCap $contentType.Sys.ID }}() (vos []*Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	return cc.ManageFiltered{{ firstCap $contentType.Sys.ID }}(nil)
}

func (cc *ContentfulClient) ManageFiltered{{ firstCap $contentType.Sys.ID }}(query *contentful.Query) (vos []*Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	if cc.CMA == nil {
		return nil, errors.New("ManageFiltered{{ firstCap $contentType.Sys.ID }}: No CMA client available")
	}
	col := cc.CMA.Entries.List(cc.SpaceID)
	if query != nil {
		col.Query = *query
	}
	col.Query.ContentType("{{ $contentType.Sys.ID }}").Locale("*").Include(10)
	_, err = col.GetAll()
	if err != nil {
		return nil, err
	}
	if col.Includes["Entry"] != nil {
		for _, item := range col.Items { 
			col.Includes["Entry"] = append(col.Includes["Entry"].([]interface{}), item)
		}
	}
	return ColToCf{{ firstCap $contentType.Sys.ID }}(col,cc.LogFn)
}

func (cc *ContentfulClient) Manage{{ firstCap $contentType.Sys.ID }}ByID(id string) (vo *Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	if cc.CMA == nil {
		return nil, errors.New("Manage{{ firstCap $contentType.Sys.ID }}ByID: No CMA client available")
	}
	col := cc.CMA.Entries.List(cc.SpaceID)
	col.Query.ContentType("{{ $contentType.Sys.ID }}").Locale("*").Equal("sys.id",id)
	_, err = col.GetAll()
	if err != nil {
		return nil, err
	}
	if len(col.Items) == 0 {
		return nil, fmt.Errorf("Manage{{ firstCap $contentType.Sys.ID }}ByID: %s Not found", id)
	}
	vos, err := ColToCf{{ firstCap $contentType.Sys.ID }}(col,cc.LogFn)
	if err != nil {
		return nil, fmt.Errorf("Manage{{ firstCap $contentType.Sys.ID }}ByID: Error converting %s to VO: " + err.Error(), id)
	}
	vo = vos[0]
	return
}

func ColToCf{{ firstCap $contentType.Sys.ID }}(col *contentful.Collection, logFn func(string, string, string, error)) (vos []*Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	for _, item := range col.Items {
		var vo Cf{{ firstCap $contentType.Sys.ID }}
		byteArray, _ := json.Marshal(item)
		err = json.NewDecoder(bytes.NewReader(byteArray)).Decode(&vo)
		if err != nil {
			break
		}
		vo.Col = col
		vo.LogFn = logFn
		vos = append(vos, &vo)
	}
	return vos, err
}

func (ref ContentfulReferencedEntry) ToCf{{ firstCap $contentType.Sys.ID }}() (vo *Cf{{ firstCap $contentType.Sys.ID }}) {
	byteArray, _ := json.Marshal(ref.Entry)
	err := json.NewDecoder(bytes.NewReader(byteArray)).Decode(&vo)
	if err != nil && vo.LogFn != nil {
		vo.LogFn(ref.Entry.Sys.ContentType.Sys.ID, ref.Entry.Sys.ID, "ToCf{{ firstCap $contentType.Sys.ID }}()", err)
		return
	}
	vo.Col = ref.Col
	return
}

// {{ firstCap $contentType.Sys.ID }} Field getters
{{ range $fieldIndex, $field := $contentType.Fields }}
{{ if fieldIsBasic $field }}func (vo *Cf{{ firstCap $contentType.Sys.ID }}) {{ firstCap $field.ID }}(locale ...Locale) ({{ mapFieldType $contentType.Sys.ID $field }}, error) {
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
		if _, ok := localeFallback[loc]; !ok {
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}, ErrLocaleUnsupported
		}
	} 
	if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
		if _, ok := localeFallback[loc]; !ok {
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}, ErrNotSet
		}
		loc = localeFallback[loc]
		if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}, ErrNotSetNoFallback
		}
	}
	return vo.Fields.{{ firstCap $field.ID }}[string(loc)], nil
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) ValueOf{{ firstCap $field.ID }}(locale ...Locale) ({{ mapFieldType $contentType.Sys.ID $field }}) {
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
	}
	value, err := vo.{{ firstCap $field.ID }}(loc)
	if err != nil && vo.LogFn != nil {
		vo.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "ValueOf{{ firstCap $field.ID }}()", err)
	}
	return value
}{{ end }}{{ if fieldIsComplex $field }}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) {{ firstCap $field.ID }}(locale ...Locale) (*{{ mapFieldType $contentType.Sys.ID $field }}, error) {
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
		if _, ok := localeFallback[loc]; !ok {
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}, ErrLocaleUnsupported
		}
	} 
	if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
		if _, ok := localeFallback[loc]; !ok {
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}, ErrNotSet
		}
		loc = localeFallback[loc]
		if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}, ErrNotSetNoFallback
		}
	}
	{{ $field.ID }} := vo.Fields.{{ firstCap $field.ID }}[string(loc)]
	return &{{ $field.ID }}, nil
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) ValueOf{{ firstCap $field.ID }}(locale ...Locale) ({{ mapFieldType $contentType.Sys.ID $field }}) {
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
	}
	value, err := vo.{{ firstCap $field.ID }}(loc)
	if err != nil && vo.LogFn != nil {
		vo.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "ValueOf{{ firstCap $field.ID }}()", err)
	}
	return value
}{{ end }}{{ if fieldIsMultipleReference $field }}func (vo *Cf{{ firstCap $contentType.Sys.ID }}) {{ firstCap $field.ID }}(locale ...Locale) ([]*ContentfulReferencedEntry, error) {
	{{ $field.ID }} := []*ContentfulReferencedEntry{}
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
		if _, ok := localeFallback[loc]; !ok {
			return nil, ErrLocaleUnsupported
		}
	} 
	if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
		if _, ok := localeFallback[loc]; !ok {
			return nil, ErrNotSet
		}
		loc = localeFallback[loc]
		if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
			return nil, ErrNotSetNoFallback
		}
	}
	for _, eachLocalized{{ firstCap $field.ID }} := range vo.Fields.{{ firstCap $field.ID }}[string(loc)] {
		includeEntryMap := vo.getIncludesEntryMap()
		if _, ok := includeEntryMap[eachLocalized{{ firstCap $field.ID }}.Sys.ID]; !ok {
			return nil, ErrRefNotIncludes
		}
		{{ $field.ID }} = append({{ $field.ID }}, &ContentfulReferencedEntry{
			Entry: includeEntryMap[eachLocalized{{ firstCap $field.ID }}.Sys.ID],
			Col:   vo.Col,
		})
	}
	return {{ $field.ID }}, nil 
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) ValueOf{{ firstCap $field.ID }}(locale ...Locale) ([]*ContentfulReferencedEntry) {
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
	}
	value, err := vo.{{ firstCap $field.ID }}(loc)
	if err != nil && vo.LogFn != nil {
		vo.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "ValueOf{{ firstCap $field.ID }}()", err)
	}
	return value
}{{ end }}{{ if fieldIsReference $field }}func (vo *Cf{{ firstCap $contentType.Sys.ID }}) {{ firstCap $field.ID }}(locale ...Locale) (*ContentfulReferencedEntry, error) {
	{{ $field.ID }} := &ContentfulReferencedEntry{}
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
		if _, ok := localeFallback[loc]; !ok {
			return nil, ErrLocaleUnsupported
		}
	} 
	if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
		if _, ok := localeFallback[loc]; !ok {
			return nil, ErrNotSet
		}
		loc = localeFallback[loc]
		if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
			return nil, ErrNotSetNoFallback
		}
	}
	localized{{ firstCap $field.ID }} := vo.Fields.{{ firstCap $field.ID }}[string(loc)]
	includesEntryMap := vo.getIncludesEntryMap()
	if _, ok := includesEntryMap[localized{{ firstCap $field.ID }}.Sys.ID]; !ok {
		return nil, ErrRefNotIncludes
	} 
	{{ $field.ID }}.Entry = includesEntryMap[localized{{ firstCap $field.ID }}.Sys.ID]
	{{ $field.ID }}.Col = vo.Col
	return {{ $field.ID }}, nil
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) ValueOf{{ firstCap $field.ID }}(locale ...Locale) (*ContentfulReferencedEntry) {
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
	}
	value, err := vo.{{ firstCap $field.ID }}(loc)
	if err != nil && vo.LogFn != nil {
		vo.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "ValueOf{{ firstCap $field.ID }}()", err)
	}
	return value
}{{ end }}{{ if fieldIsMultipleAsset $field }}func (vo *Cf{{ firstCap $contentType.Sys.ID }}) {{ firstCap $field.ID }}(locale ...Locale) ([]*contentful.AssetNoLocale, error) {
	{{ $field.ID }} := []*contentful.AssetNoLocale{}
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
		if _, ok := localeFallback[loc]; !ok {
			return nil, ErrLocaleUnsupported
		}
	} 
	if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
		if _, ok := localeFallback[loc]; !ok {
			return nil, ErrNotSet
		}
		loc = localeFallback[loc]
		if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
			return nil, ErrNotSetNoFallback
		}
	}
	for _, eachLocalized{{ firstCap $field.ID }} := range vo.Fields.{{ firstCap $field.ID }}[string(loc)] {
		includeAssetMap := vo.Col.ToIncludesLocalizedAssetMap()
		if _, ok := includeAssetMap[eachLocalized{{ firstCap $field.ID }}.Sys.ID]; !ok {
			return nil, ErrRefNotIncludes
			
		}
		tempAsset := &contentful.AssetNoLocale{}
		tempAsset.Sys = includeAssetMap[eachLocalized{{ firstCap $field.ID }}.Sys.ID].Sys
		tempAsset.Fields = &contentful.FileFieldsNoLocale{}
		tempAsset.Fields.Title = includeAssetMap[eachLocalized{{ firstCap $field.ID }}.Sys.ID].Fields.Title[string(loc)]
		tempAsset.Fields.Description = includeAssetMap[eachLocalized{{ firstCap $field.ID }}.Sys.ID].Fields.Description[string(loc)]
		tempAsset.Fields.File = includeAssetMap[eachLocalized{{ firstCap $field.ID }}.Sys.ID].Fields.File[string(loc)]
		{{ $field.ID }} = append({{ $field.ID }}, tempAsset)
	}
	return {{ $field.ID }}, nil
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) ValueOf{{ firstCap $field.ID }}(locale ...Locale) ([]*contentful.AssetNoLocale) {
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
	}
	value, err := vo.{{ firstCap $field.ID }}(loc)
	if err != nil && vo.LogFn != nil {
		vo.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "ValueOf{{ firstCap $field.ID }}()", err)
	}
	return value
}{{ end }}{{ if fieldIsAsset $field }}func (vo *Cf{{ firstCap $contentType.Sys.ID }}) {{ firstCap $field.ID }}(locale ...Locale) (*contentful.AssetNoLocale, error) {
	{{ $field.ID }} := &contentful.AssetNoLocale{}
	{{ $field.ID }}.Fields = &contentful.FileFieldsNoLocale{}
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
		if _, ok := localeFallback[loc]; !ok {
			return nil, ErrLocaleUnsupported
		}
	} 
	localized{{ firstCap $field.ID }} := vo.Fields.{{ firstCap $field.ID }}[string(defaultLocale)]
	includesAssetMap := vo.Col.ToIncludesLocalizedAssetMap()
	if _, ok := includesAssetMap[localized{{ firstCap $field.ID }}.Sys.ID]; !ok {
		return nil, ErrRefNotIncludes
	}
	{{ $field.ID }}.Sys = includesAssetMap[localized{{ firstCap $field.ID }}.Sys.ID].Sys
    locTitle := loc
	hasLocTitle := true
	if _, ok := includesAssetMap[localized{{ firstCap $field.ID }}.Sys.ID].Fields.Title[string(loc)]; !ok {
		locTitle = localeFallback[loc]
		if _, ok := includesAssetMap[localized{{ firstCap $field.ID }}.Sys.ID].Fields.Title[string(locTitle)]; !ok {
			hasLocTitle = false
		}
	}
	if hasLocTitle {
		{{ $field.ID }}.Fields.Title = includesAssetMap[localized{{ firstCap $field.ID }}.Sys.ID].Fields.Title[string(locTitle)]
	}	
    locDescription := loc
	hasLocDescription := true
	if _, ok := includesAssetMap[localized{{ firstCap $field.ID }}.Sys.ID].Fields.Description[string(loc)]; !ok {
		locDescription = localeFallback[loc]
		if _, ok := includesAssetMap[localized{{ firstCap $field.ID }}.Sys.ID].Fields.Description[string(locDescription)]; !ok {
			hasLocDescription = false
		}
	}
	if hasLocDescription {
		{{ $field.ID }}.Fields.Description = includesAssetMap[localized{{ firstCap $field.ID }}.Sys.ID].Fields.Description[string(locDescription)]
	}	
    locFile := loc
	hasLocFile := true
	if _, ok := includesAssetMap[localized{{ firstCap $field.ID }}.Sys.ID].Fields.File[string(loc)]; !ok {
		locFile = localeFallback[loc]
		if _, ok := includesAssetMap[localized{{ firstCap $field.ID }}.Sys.ID].Fields.File[string(locFile)]; !ok {
			hasLocFile = false
		}
	}
	if hasLocFile {
		{{ $field.ID }}.Fields.File = includesAssetMap[localized{{ firstCap $field.ID }}.Sys.ID].Fields.File[string(locFile)]
	}
	return {{ $field.ID }}, nil
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) ValueOf{{ firstCap $field.ID }}(locale ...Locale) (*contentful.AssetNoLocale) {
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
	}
	value, err := vo.{{ firstCap $field.ID }}(loc)
	if err != nil && vo.LogFn != nil {
		vo.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "ValueOf{{ firstCap $field.ID }}()", err)
	}
	return value
}{{ end }}{{ end }}

// {{ firstCap $contentType.Sys.ID }} Field setters
{{ range $fieldIndex, $field := $contentType.Fields }}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) Set{{ firstCap $field.ID }}({{ $field.ID }} {{ mapFieldType $contentType.Sys.ID $field }}, locale ...Locale) (err error) {
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
		if _, ok := localeFallback[loc]; !ok {
			return ErrLocaleUnsupported
		}
	}
	if vo.Fields.{{ firstCap $field.ID }} == nil {
		vo.Fields.{{ firstCap $field.ID }} = make(map[string]{{ mapFieldType $contentType.Sys.ID $field }})
	} 
	vo.Fields.{{ firstCap $field.ID }}[string(loc)] = {{ $field.ID }}
	return
}
{{ end }}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) UpsertEntry(cc *ContentfulClient) (err error) {
	cfEntry := &contentful.Entry{}
	tmp, errMarshal := json.Marshal(vo)
	if errMarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UpsertEntry: Can't marshal JSON from VO")
	}
	errUnmarshal := json.Unmarshal(tmp, &cfEntry)
	if errUnmarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UpsertEntry: Can't unmarshal JSON into CF entry")
	}

	err = cc.CMA.Entries.Upsert(cc.SpaceID, cfEntry)
	if err != nil {
		return fmt.Errorf("Cf{{ firstCap $contentType.Sys.ID }} UpsertEntry: Operation failed: %s", err)
	}
	return
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) PublishEntry(cc *ContentfulClient) (err error) {
	cfEntry := &contentful.Entry{}
	tmp, errMarshal := json.Marshal(vo)
	if errMarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} PublishEntry: Can't marshal JSON from VO")
	}
	errUnmarshal := json.Unmarshal(tmp, &cfEntry)
	if errUnmarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} PublishEntry: Can't unmarshal JSON into CF entry")
	}
	err = cc.CMA.Entries.Publish(cc.SpaceID, cfEntry)
	if err != nil {
		return fmt.Errorf("Cf{{ firstCap $contentType.Sys.ID }} PublishEntry: publish operation failed: %s", err)
	}
	return
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) UnpublishEntry(cc *ContentfulClient) (err error) {
	cfEntry := &contentful.Entry{}
	tmp, errMarshal := json.Marshal(vo)
	if errMarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UnpublishEntry: Can't marshal JSON from VO")
	}
	errUnmarshal := json.Unmarshal(tmp, &cfEntry)
	if errUnmarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UnpublishEntry: Can't unmarshal JSON into CF entry")
	}
	err = cc.CMA.Entries.Unpublish(cc.SpaceID, cfEntry)
	if err != nil {
		return fmt.Errorf("Cf{{ firstCap $contentType.Sys.ID }} UnpublishEntry: unpublish operation failed: %s", err)
	}
	return
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) UpdateEntry(cc *ContentfulClient) (err error) {
	cfEntry := &contentful.Entry{}
	tmp, errMarshal := json.Marshal(vo)
	if errMarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UpdateEntry: Can't marshal JSON from VO")
	}
	errUnmarshal := json.Unmarshal(tmp, &cfEntry)
	if errUnmarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UpdateEntry: Can't unmarshal JSON into CF entry")
	}

	err = cc.CMA.Entries.Upsert(cc.SpaceID, cfEntry)
	if err != nil {
		return fmt.Errorf("Cf{{ firstCap $contentType.Sys.ID }} UpdateEntry: upsert operation failed: %s", err)
	}
	tmp, errMarshal = json.Marshal(cfEntry)
	if errMarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UpdateEntry: Can't marshal JSON back from CF entry")
	}
	errUnmarshal = json.Unmarshal(tmp, &vo)
	if errUnmarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UpdateEntry: Can't unmarshal JSON back into VO")
	}
	err = cc.CMA.Entries.Publish(cc.SpaceID, cfEntry)
	if err != nil {
		return fmt.Errorf("Cf{{ firstCap $contentType.Sys.ID }} UpdateEntry: publish operation failed: %s", err)
	}
	return
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) DeleteEntry(cc *ContentfulClient) (err error) {
	cfEntry := &contentful.Entry{}
	tmp, errMarshal := json.Marshal(vo)
	if errMarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} DeleteEntry: Can't marshal JSON from VO")
	}
	errUnmarshal := json.Unmarshal(tmp, &cfEntry)
	if errUnmarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} DeleteEntry: Can't unmarshal JSON into CF entry")
	}
	if cfEntry.Sys.PublishedCounter > 0 {
		errUnpublish := cc.CMA.Entries.Unpublish(cc.SpaceID, cfEntry)
		if errUnpublish != nil {
			return fmt.Errorf("Cf{{ firstCap $contentType.Sys.ID }} DeleteEntry: Unpublish entry failed: %w", errUnpublish)
		}
	}
	errDelete := cc.CMA.Entries.Delete(cc.SpaceID, cfEntry.Sys.ID)
	if errDelete != nil {
		return fmt.Errorf("Cf{{ firstCap $contentType.Sys.ID }} DeleteEntry: Delete entry failed: %w", errDelete)
	}
	return nil
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) ToReference() (refSys ContentTypeSys) {
	refSys.Sys.ID = vo.Sys.ID
	refSys.Sys.Type = FieldTypeLink
	refSys.Sys.LinkType = FieldLinkTypeEntry
	return
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) ToReferenceArray() (refSysArray []ContentTypeSys) {
	refSys := ContentTypeSys{}
	refSys.Sys.ID = vo.Sys.ID
	refSys.Sys.Type = FieldTypeLink
	refSys.Sys.LinkType = FieldLinkTypeEntry
	refSysArray = append(refSysArray,refSys)
	return
}
