// Package {{ .PackageName }} - DO NOT EDIT THIS FILE: Auto-generated code by https://github.com/foomo/contentful-erm
{{ $cfg := . }}{{ $contentTypes := .ContentTypes }}{{ $contentType := .ContentType }}package {{ .PackageName }}

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"reflect"
	"time"
	"github.com/foomo/contentful"
)

const ContentType{{ firstCap $contentType.Sys.ID }} = "{{ $contentType.Sys.ID }}"
var TypeOf{{ firstCap $contentType.Sys.ID }} = reflect.TypeOf(&Cf{{ firstCap $contentType.Sys.ID }}{})
// ---{{ firstCap $contentType.Sys.ID }} private methods---

func (cc *ContentfulClient) cacheAll{{ firstCap $contentType.Sys.ID }}() (vos map[string]*Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	if cc.Client == nil {
		return nil, errors.New("cacheAll{{ firstCap $contentType.Sys.ID }}: No CDA client available")
	}
	start := time.Now()
	col, err := cc.optimisticPageSizeGetAll("{{ $contentType.Sys.ID }}", cc.OptimisticPageSize)
	if err != nil {
		return nil, err
	}
	all{{ firstCap $contentType.Sys.ID }}, err := colToCf{{ firstCap $contentType.Sys.ID }}(col,cc)
	if err != nil {
		return nil, err
	}
	{{ $contentType.Sys.ID }}Map := map[string]*Cf{{ firstCap $contentType.Sys.ID }}{}
	for _, {{ $contentType.Sys.ID }} := range all{{ firstCap $contentType.Sys.ID }} {
		{{ $contentType.Sys.ID }}Map[{{ $contentType.Sys.ID }}.Sys.ID] = {{ $contentType.Sys.ID }}
		cc.Cache.IdContentTypeMap[{{ $contentType.Sys.ID }}.Sys.ID] = ContentType{{ firstCap $contentType.Sys.ID }}
		{{ range $fieldIndex, $field := $contentType.Fields }}
			{{ if fieldIsMultipleReference $field }}
				for _, loc := range cc.Locales {
					children, okChildren := {{ $contentType.Sys.ID }}.Fields.{{ firstCap $field.ID }}[string(loc)]
					if okChildren {
						for _, child := range children {
							if cc.Cache.ParentMap[child.Sys.ID] == nil {
								cc.Cache.ParentMap[child.Sys.ID] = []EntryParent{}
							}
							cc.Cache.ParentMap[child.Sys.ID] = append(cc.Cache.ParentMap[child.Sys.ID], EntryParent{ContentType: {{ $contentType.Sys.ID }}.Sys.ContentType.Sys.ID, ID: {{ $contentType.Sys.ID }}.Sys.ID, VO: {{ $contentType.Sys.ID }} })
						}
					}
				}
			{{ end }}
			{{ if fieldIsReference $field }}
			for _, loc := range cc.Locales {
				child, okChild := {{ $contentType.Sys.ID }}.Fields.{{ firstCap $field.ID }}[string(loc)]
				if okChild {
					if cc.Cache.ParentMap[child.Sys.ID] == nil {
						cc.Cache.ParentMap[child.Sys.ID] = []EntryParent{}
					}
					cc.Cache.ParentMap[child.Sys.ID] = append(cc.Cache.ParentMap[child.Sys.ID], EntryParent{ContentType: {{ $contentType.Sys.ID }}.Sys.ContentType.Sys.ID, ID: {{ $contentType.Sys.ID }}.Sys.ID, VO: {{ $contentType.Sys.ID }} })
					}
				}
				{{ end }}
		{{ end }}
	}
	fmt.Printf("Cached %d {{ firstCap $contentType.Sys.ID }} entries in %s\n", len({{ $contentType.Sys.ID }}Map), time.Since(start))
	return {{ $contentType.Sys.ID }}Map, nil
}

func colToCf{{ firstCap $contentType.Sys.ID }}(col *contentful.Collection, cc *ContentfulClient) (vos []*Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	for _, item := range col.Items {
		var vo Cf{{ firstCap $contentType.Sys.ID }}
		byteArray, _ := json.Marshal(item)
		err = json.NewDecoder(bytes.NewReader(byteArray)).Decode(&vo)
		if err != nil {
			break
		}
		vo.CC = cc
		vos = append(vos, &vo)
	}
	return vos, err
}

// ---{{ firstCap $contentType.Sys.ID }} public methods---

func (cc *ContentfulClient) GetAll{{ firstCap $contentType.Sys.ID }}() (voMap map[string]*Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	if cc.Cache != nil {
		return cc.Cache.EntryMaps.{{ firstCap $contentType.Sys.ID }}, nil
	}
	col, err := cc.optimisticPageSizeGetAll("{{ $contentType.Sys.ID }}", cc.OptimisticPageSize)
	if err != nil {
		return nil, err
	}
	all{{ firstCap $contentType.Sys.ID }}, err := colToCf{{ firstCap $contentType.Sys.ID }}(col,cc)
	if err != nil {
		return nil, err
	}
	{{ $contentType.Sys.ID }}Map := map[string]*Cf{{ firstCap $contentType.Sys.ID }}{}
	for _, {{ $contentType.Sys.ID }} := range all{{ firstCap $contentType.Sys.ID }} {
		{{ $contentType.Sys.ID }}Map[{{ $contentType.Sys.ID }}.Sys.ID] = {{ $contentType.Sys.ID }}
	}
	return {{ $contentType.Sys.ID }}Map, nil
}

func (cc *ContentfulClient) GetFiltered{{ firstCap $contentType.Sys.ID }}(query *contentful.Query) (voMap map[string]*Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	if cc.Client == nil {
		return nil, errors.New("getFiltered{{ firstCap $contentType.Sys.ID }}: No client available")
	}
	col := cc.Client.Entries.List(cc.SpaceID)
	if query != nil {
		col.Query = *query
	}
	col.Query.ContentType("{{ $contentType.Sys.ID }}").Locale("*").Include(0)
	_, err = col.GetAll()
	if err != nil {
		return nil, errors.New("getFiltered{{ firstCap $contentType.Sys.ID }}: " + err.Error())
	}
	all{{ firstCap $contentType.Sys.ID }}, err := colToCf{{ firstCap $contentType.Sys.ID }}(col,cc)
	if err != nil {
		return nil, errors.New("getFiltered{{ firstCap $contentType.Sys.ID }}: " + err.Error())
	}
	{{ $contentType.Sys.ID }}Map := map[string]*Cf{{ firstCap $contentType.Sys.ID }}{}
	for _, {{ $contentType.Sys.ID }} := range all{{ firstCap $contentType.Sys.ID }} {
		{{ $contentType.Sys.ID }}Map[{{ $contentType.Sys.ID }}.Sys.ID] = {{ $contentType.Sys.ID }}
	}
	return {{ $contentType.Sys.ID }}Map, nil
}

func (cc *ContentfulClient) Get{{ firstCap $contentType.Sys.ID }}ByID(id string) (vo *Cf{{ firstCap $contentType.Sys.ID }}, err error) {
	if cc.Client == nil {
		return nil, errors.New("Get{{ firstCap $contentType.Sys.ID }}ByID: No client available")
	}
	if cc.Cache != nil {
		vo, okVo := cc.Cache.EntryMaps.{{ firstCap $contentType.Sys.ID }}[id]
		if okVo {
			return vo, nil
		}
	}
	col := cc.Client.Entries.List(cc.SpaceID)
	col.Query.ContentType("{{ $contentType.Sys.ID }}").Locale("*").Include(0).Equal("sys.id",id)
	_, err = col.GetAll()
	if err != nil {
		return nil, err
	}
		if len(col.Items) == 0 {
		return nil, fmt.Errorf("Get{{ firstCap $contentType.Sys.ID }}ByID: %s Not found", id)
	}
	vos, err := colToCf{{ firstCap $contentType.Sys.ID }}(col,cc)
	if err != nil {
		return nil, fmt.Errorf("Get{{ firstCap $contentType.Sys.ID }}ByID: Error converting %s to VO: " + err.Error(), id)
	}
	vo = vos[0]
	return
}

func NewCf{{ firstCap $contentType.Sys.ID }}() (cf{{ firstCap $contentType.Sys.ID }} *Cf{{ firstCap $contentType.Sys.ID }}) {
	cf{{ firstCap $contentType.Sys.ID }} = &Cf{{ firstCap $contentType.Sys.ID }}{}
	{{ range $fieldIndex, $field := $contentType.Fields }}
		cf{{ firstCap $contentType.Sys.ID }}.Fields.{{ firstCap $field.ID }} = map[string]{{ mapFieldType $contentType.Sys.ID $field }}{}
	{{ end }}
	cf{{ firstCap $contentType.Sys.ID }}.Sys.ContentType.Sys.ID = "{{ $contentType.Sys.ID }}"
	cf{{ firstCap $contentType.Sys.ID }}.Sys.ContentType.Sys.Type = FieldTypeLink
	cf{{ firstCap $contentType.Sys.ID }}.Sys.ContentType.Sys.LinkType = "ContentType"
	return
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) GetParents(contentType ...string) (parents []EntryParent, err error) {
	parents = []EntryParent{}
	if vo.CC.Cache != nil {
		if len(contentType) != 0 {
			for _, parent := range vo.CC.Cache.ParentMap[vo.Sys.ID] {
				if parent.ContentType == contentType[0] {
					parents = append(parents, parent)
				}
			}
			return parents, nil
		}
		return vo.CC.Cache.ParentMap[vo.Sys.ID], nil
	}
	if len(contentType) != 1 {
		return nil, errors.New("GetParents: uncached parentMap queries need a contentType")
	}
	col := vo.CC.Client.Entries.List(vo.CC.SpaceID)
	col.Query.Equal("fields.nodes.sys.id", vo.Sys.ID).ContentType(contentType[0]).Locale("*")
	_, err = col.GetAll()
	if err != nil {
		return nil, errors.New("GetParents: " + err.Error())
	}
	switch contentType[0] {
	{{ range $index , $contentType := $contentTypes }}
	case ContentType{{ firstCap $contentType.Sys.ID }}:
		for _, item := range col.Items {
			var parentVO Cf{{ firstCap $contentType.Sys.ID }}
			byteArray, _ := json.Marshal(item)
			err = json.NewDecoder(bytes.NewReader(byteArray)).Decode(&parentVO)
			if err != nil {
				return nil, errors.New("GetParents: "+err.Error())
			}
			parentVO.CC = vo.CC
			parents = append(parents, EntryParent{
				ContentType: contentType[0],
				ID: parentVO.Sys.ID,
				VO: &parentVO,
			})
		}
	{{ end }}
	}
	return parents, nil
}
// {{ firstCap $contentType.Sys.ID }} Field getters
{{ range $fieldIndex, $field := $contentType.Fields }}
{{ if fieldIsBasic $field }}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) {{ firstCap $field.ID }}(locale ...Locale) {{ mapFieldType $contentType.Sys.ID $field }} {
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
		if _, ok := localeFallback[loc]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrLocaleUnsupported)
			}
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}
		}
	} 
	if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
		if _, ok := localeFallback[loc]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrNotSet)
			}
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}
		}
		loc = localeFallback[loc]
		if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrNotSetNoFallback)
			}
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}
		}
	}
	return vo.Fields.{{ firstCap $field.ID }}[string(loc)]
}
{{ end }}
{{ if fieldIsComplex $field }}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) {{ firstCap $field.ID }}(locale ...Locale) *{{ mapFieldType $contentType.Sys.ID $field }} {
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
		if _, ok := localeFallback[loc]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrLocaleUnsupported)
			}
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}
		}
	} 
	if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
		if _, ok := localeFallback[loc]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrNotSet)
			}
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}
		}
		loc = localeFallback[loc]
		if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrNotSetNoFallback)
			}
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}
		}
	}
	{{ $field.ID }} := vo.Fields.{{ firstCap $field.ID }}[string(loc)]
	return &{{ $field.ID }}
}
{{ end }}
{{ if fieldIsMultipleReference $field }}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) {{ firstCap $field.ID }}(locale ...Locale) []interface{} {
	{{ $field.ID }} := []interface{}{}
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
		if _, ok := localeFallback[loc]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrLocaleUnsupported)
			}
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}
		}
	}
	if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
		if _, ok := localeFallback[loc]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrNotSet)
			}
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}
		}
		loc = localeFallback[loc]
		if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrNotSetNoFallback)
			}
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}
		}
	}
	for _, eachLocalized{{ firstCap $field.ID }} := range vo.Fields.{{ firstCap $field.ID }}[string(loc)] {
		contentType, err := vo.CC.GetContentTypeOfID(eachLocalized{{ firstCap $field.ID }}.Sys.ID)
		if err != nil {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", errors.New("Couldn't get contentType of referenced entry"))
			}
			return nil
		}
		switch contentType {
		{{ range $index , $contentType := $contentTypes }}
		case ContentType{{ firstCap $contentType.Sys.ID }}:
			referencedVO, err := vo.CC.Get{{ firstCap $contentType.Sys.ID }}ByID(eachLocalized{{ firstCap $field.ID }}.Sys.ID)
			if err != nil {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", err)
			}
			return nil
		}
		{{ $field.ID }} = append({{ $field.ID }},referencedVO)
		{{ end }}
		}
	}
	return {{ $field.ID }}
}
{{ end }}
{{ if fieldIsReference $field }}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) {{ firstCap $field.ID }}(locale ...Locale) interface{} {
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
		if _, ok := localeFallback[loc]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrLocaleUnsupported)
			}
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}
		}
	}
	if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
		if _, ok := localeFallback[loc]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrNotSet)
			}
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}
		}
		loc = localeFallback[loc]
		if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrNotSetNoFallback)
			}
			return {{ mapFieldTypeLiteral $contentType.Sys.ID $field }}
		}
	}
	localized{{ firstCap $field.ID }} := vo.Fields.{{ firstCap $field.ID }}[string(loc)]
	contentType, err := vo.CC.GetContentTypeOfID(localized{{ firstCap $field.ID }}.Sys.ID)
	if err != nil {
		if vo.CC.LogFn != nil {
			vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", errors.New("Couldn't get contentType of referenced entry"))
		}
		return nil
	}
	switch contentType {
	{{ range $index , $contentType := $contentTypes }}
	case ContentType{{ firstCap $contentType.Sys.ID }}:
		referencedVO, err := vo.CC.Get{{ firstCap $contentType.Sys.ID }}ByID(localized{{ firstCap $field.ID }}.Sys.ID)
		if err != nil {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", err)
			}
			return nil
		}
		return referencedVO
	{{ end }}
	}
	return nil
}
{{ end }}
{{ if fieldIsMultipleAsset $field }}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) {{ firstCap $field.ID }}(locale ...Locale) []*contentful.AssetNoLocale {
	{{ $field.ID }} := []*contentful.AssetNoLocale{}
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
		if _, ok := localeFallback[loc]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrLocaleUnsupported)
			}
			return nil
		}
	}
	if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
		if _, ok := localeFallback[loc]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrNotSet)
			}
			return nil
		}
		loc = localeFallback[loc]
		if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrNotSetNoFallback)
			}
			return nil
		}
	}
	for _, eachLocalized{{ firstCap $field.ID }} := range vo.Fields.{{ firstCap $field.ID }}[string(loc)] {
		asset, err := vo.CC.GetAssetByID(eachLocalized{{ firstCap $field.ID }}.Sys.ID)
		if err != nil {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrNotSetNoFallback)
			}
			return nil
		}
		tempAsset := &contentful.AssetNoLocale{}
		tempAsset.Sys = asset.Sys
		tempAsset.Fields = &contentful.FileFieldsNoLocale{}
		tempAsset.Fields.Title = asset.Fields.Title[string(loc)]
		tempAsset.Fields.Description = asset.Fields.Description[string(loc)]
		tempAsset.Fields.File = asset.Fields.File[string(loc)]
		{{ $field.ID }} = append({{ $field.ID }}, tempAsset)
	}
	return {{ $field.ID }}, nil
}
{{ end }}
{{ if fieldIsAsset $field }}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) {{ firstCap $field.ID }}(locale ...Locale) *contentful.AssetNoLocale {
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
		if _, ok := localeFallback[loc]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrLocaleUnsupported)
			}
			return nil
		}
	}
	if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
		if _, ok := localeFallback[loc]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrNotSet)
			}
			return nil
		}
		loc = localeFallback[loc]
		if _, ok := vo.Fields.{{ firstCap $field.ID }}[string(loc)]; !ok {
			if vo.CC.LogFn != nil {
				vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrNotSetNoFallback)
			}
			return nil
		}
	}
	localized{{ firstCap $field.ID }} := vo.Fields.{{ firstCap $field.ID }}[string(loc)]
	asset, err := vo.CC.GetAssetByID(localized{{ firstCap $field.ID }}.Sys.ID)
	if err != nil {
		if vo.CC.LogFn != nil {
			vo.CC.LogFn(vo.Sys.ContentType.Sys.ID, vo.Sys.ID, "{{ firstCap $field.ID }}()", ErrNotSetNoFallback)
		}
		return nil
	}
	tempAsset := &contentful.AssetNoLocale{}
	tempAsset.Sys = asset.Sys
	tempAsset.Fields = &contentful.FileFieldsNoLocale{}
	tempAsset.Fields.Title = asset.Fields.Title[string(loc)]
	tempAsset.Fields.Description = asset.Fields.Description[string(loc)]
	tempAsset.Fields.File = asset.Fields.File[string(loc)]
	return tempAsset
}
{{ end }}
{{ end }}

// {{ firstCap $contentType.Sys.ID }} Field setters
{{ range $fieldIndex, $field := $contentType.Fields }}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) Set{{ firstCap $field.ID }}({{ $field.ID }} {{ mapFieldType $contentType.Sys.ID $field }}, locale ...Locale) (err error) {
	loc := defaultLocale
	if len(locale) != 0 {
		loc = locale[0]
		if _, ok := localeFallback[loc]; !ok {
			return ErrLocaleUnsupported
		}
	}
	if vo.Fields.{{ firstCap $field.ID }} == nil {
		vo.Fields.{{ firstCap $field.ID }} = make(map[string]{{ mapFieldType $contentType.Sys.ID $field }})
	} 
	vo.Fields.{{ firstCap $field.ID }}[string(loc)] = {{ $field.ID }}
	return
}
{{ end }}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) UpsertEntry(cc *ContentfulClient) (err error) {
	cfEntry := &contentful.Entry{}
	tmp, errMarshal := json.Marshal(vo)
	if errMarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UpsertEntry: Can't marshal JSON from VO")
	}
	errUnmarshal := json.Unmarshal(tmp, &cfEntry)
	if errUnmarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UpsertEntry: Can't unmarshal JSON into CF entry")
	}

	err = vo.CC.Client.Entries.Upsert(cc.SpaceID, cfEntry)
	if err != nil {
		return fmt.Errorf("Cf{{ firstCap $contentType.Sys.ID }} UpsertEntry: Operation failed: %s", err)
	}
	return
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) PublishEntry(cc *ContentfulClient) (err error) {
	cfEntry := &contentful.Entry{}
	tmp, errMarshal := json.Marshal(vo)
	if errMarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} PublishEntry: Can't marshal JSON from VO")
	}
	errUnmarshal := json.Unmarshal(tmp, &cfEntry)
	if errUnmarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} PublishEntry: Can't unmarshal JSON into CF entry")
	}
	err = vo.CC.Client.Entries.Publish(cc.SpaceID, cfEntry)
	if err != nil {
		return fmt.Errorf("Cf{{ firstCap $contentType.Sys.ID }} PublishEntry: publish operation failed: %s", err)
	}
	return
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) UnpublishEntry(cc *ContentfulClient) (err error) {
	cfEntry := &contentful.Entry{}
	tmp, errMarshal := json.Marshal(vo)
	if errMarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UnpublishEntry: Can't marshal JSON from VO")
	}
	errUnmarshal := json.Unmarshal(tmp, &cfEntry)
	if errUnmarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UnpublishEntry: Can't unmarshal JSON into CF entry")
	}
	err = vo.CC.Client.Entries.Unpublish(cc.SpaceID, cfEntry)
	if err != nil {
		return fmt.Errorf("Cf{{ firstCap $contentType.Sys.ID }} UnpublishEntry: unpublish operation failed: %s", err)
	}
	return
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) UpdateEntry(cc *ContentfulClient) (err error) {
	cfEntry := &contentful.Entry{}
	tmp, errMarshal := json.Marshal(vo)
	if errMarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UpdateEntry: Can't marshal JSON from VO")
	}
	errUnmarshal := json.Unmarshal(tmp, &cfEntry)
	if errUnmarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UpdateEntry: Can't unmarshal JSON into CF entry")
	}

	err = vo.CC.Client.Entries.Upsert(cc.SpaceID, cfEntry)
	if err != nil {
		return fmt.Errorf("Cf{{ firstCap $contentType.Sys.ID }} UpdateEntry: upsert operation failed: %s", err)
	}
	tmp, errMarshal = json.Marshal(cfEntry)
	if errMarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UpdateEntry: Can't marshal JSON back from CF entry")
	}
	errUnmarshal = json.Unmarshal(tmp, &vo)
	if errUnmarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} UpdateEntry: Can't unmarshal JSON back into VO")
	}
	err = vo.CC.Client.Entries.Publish(cc.SpaceID, cfEntry)
	if err != nil {
		return fmt.Errorf("Cf{{ firstCap $contentType.Sys.ID }} UpdateEntry: publish operation failed: %s", err)
	}
	return
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) DeleteEntry(cc *ContentfulClient) (err error) {
	cfEntry := &contentful.Entry{}
	tmp, errMarshal := json.Marshal(vo)
	if errMarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} DeleteEntry: Can't marshal JSON from VO")
	}
	errUnmarshal := json.Unmarshal(tmp, &cfEntry)
	if errUnmarshal != nil {
		return errors.New("Cf{{ firstCap $contentType.Sys.ID }} DeleteEntry: Can't unmarshal JSON into CF entry")
	}
	if cfEntry.Sys.PublishedCounter > 0 {
		errUnpublish := vo.CC.Client.Entries.Unpublish(cc.SpaceID, cfEntry)
		if errUnpublish != nil {
			return fmt.Errorf("Cf{{ firstCap $contentType.Sys.ID }} DeleteEntry: Unpublish entry failed: %w", errUnpublish)
		}
	}
	errDelete := vo.CC.Client.Entries.Delete(cc.SpaceID, cfEntry.Sys.ID)
	if errDelete != nil {
		return fmt.Errorf("Cf{{ firstCap $contentType.Sys.ID }} DeleteEntry: Delete entry failed: %w", errDelete)
	}
	return nil
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) ToReference() (refSys ContentTypeSys) {
	refSys.Sys.ID = vo.Sys.ID
	refSys.Sys.Type = FieldTypeLink
	refSys.Sys.LinkType = FieldLinkTypeEntry
	return
}
func (vo *Cf{{ firstCap $contentType.Sys.ID }}) ToReferenceArray() (refSysArray []ContentTypeSys) {
	refSys := ContentTypeSys{}
	refSys.Sys.ID = vo.Sys.ID
	refSys.Sys.Type = FieldTypeLink
	refSys.Sys.LinkType = FieldLinkTypeEntry
	refSysArray = append(refSysArray,refSys)
	return
}
